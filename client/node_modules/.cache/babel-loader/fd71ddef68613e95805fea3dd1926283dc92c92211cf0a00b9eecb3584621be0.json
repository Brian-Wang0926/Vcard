{"ast":null,"code":"/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\nvar Logger = /*#__PURE__*/function () {\n  function Logger(props) {\n    if (props === void 0) {\n      props = {};\n    }\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n    var _props = props,\n      _props$maxSize = _props.maxSize,\n      maxSize = _props$maxSize === void 0 ? MAX_LOG_SIZE : _props$maxSize;\n    this.maxSize = maxSize;\n  }\n  var _proto = Logger.prototype;\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > this.maxSize) {\n      this.record.shift();\n    }\n    return result;\n  };\n  _proto.get = function get() {\n    return this.record;\n  };\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n    var last = this.record.pop();\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n    this.recycle.push(current);\n    return last;\n  };\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n    return undefined;\n  };\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n  return Logger;\n}();\nexport default Logger;","map":{"version":3,"names":["MAX_LOG_SIZE","Logger","props","record","recycle","initValue","_props","_props$maxSize","maxSize","_proto","prototype","push","val","result","length","shift","get","getLast","undo","skipText","current","pop","last","redo","history","undefined","cleanRedo","getUndoCount","getRedoCount"],"sources":["/Users/wangbaiyuan/Documents/Wehelp/Part3/Vcard/client/node_modules/react-markdown-editor-lite/esm/plugins/logger/logger.js"],"sourcesContent":["/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n    var _props = props,\n        _props$maxSize = _props.maxSize,\n        maxSize = _props$maxSize === void 0 ? MAX_LOG_SIZE : _props$maxSize;\n    this.maxSize = maxSize;\n  }\n\n  var _proto = Logger.prototype;\n\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > this.maxSize) {\n      this.record.shift();\n    }\n\n    return result;\n  };\n\n  _proto.get = function get() {\n    return this.record;\n  };\n\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n\n    var last = this.record.pop();\n\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n\n    this.recycle.push(current);\n    return last;\n  };\n\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n\n    return undefined;\n  };\n\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n\n  return Logger;\n}();\n\nexport default Logger;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}