{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    }\n\n    // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false;\n\n    // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0;\n\n    // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n    // Turn on strikethrough syntax\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.fencedCodeBlockDefaultMode === undefined) modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n    if (modeCfg.xml === undefined) modeCfg.xml = true;\n\n    // Allow token types to be overridden by user-provided token types.\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n      listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n      taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n      ,\n      atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n      setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/,\n      textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n      fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/,\n      linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n      ,\n      punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n      expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    }\n\n    // Blocks\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false;\n      // Reset EM state\n      state.em = false;\n      // Reset STRONG state\n      state.strong = false;\n      // Reset strikethrough state\n      state.strikethrough = false;\n      // Reset state.quote\n      state.quote = 0;\n      // Reset state.indentedCode\n      state.indentedCode = false;\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n      // Reset state.trailingSpace\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false;\n      // Mark this line as blank\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation;\n      // compute once per line (on first token)\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n        if (prevLineIsList) {\n          state.list = null;\n          // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1];\n              // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      }\n\n      // not comprehensive (currently only for setext detection purposes)\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0;\n\n        // Add this list item's content's indentation to the stack\n        state.listStack.push(state.indentation);\n        // Reset inline styles which shouldn't propagate across list items\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n        // try switching mode\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state);\n        // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if (\n      // if setext set, indicates line after ---/===\n      state.setext ||\n      // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext;\n          // has no effect on type so we can reset it now\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n      return switchInline(stream, state, state.inline);\n    }\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n      return style;\n    }\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    }\n\n    // Inline\n    function getType(state) {\n      var styles = [];\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          }\n\n          // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n      if (state.quote) {\n        styles.push(tokenTypes.quote);\n\n        // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n      return styles.length ? styles.join(' ') : null;\n    }\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n      return undefined;\n    }\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n      state.taskOpen = false;\n      state.taskClosed = false;\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n      var ch = stream.next();\n\n      // Matches link titles present on next line\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n        if (ch === '(') {\n          matchCh = ')';\n        }\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      }\n\n      // If this block is changed, it may need to be updated in GFM mode\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n      if (ch === '\\\\') {\n        stream.next();\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n        return type + tokenTypes.linkInline;\n      }\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n        return type + tokenTypes.linkEmail;\n      }\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n          before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n        while (len < 3 && stream.eat(ch)) len++;\n        var after = stream.peek() || \" \";\n        // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n          setStrong = null;\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match('~~', true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n      return getType(state);\n    }\n    function linkInline(stream, state) {\n      var ch = stream.next();\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n        return type + tokenTypes.linkInline;\n      }\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n      var ch = stream.next();\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n      return 'error';\n    }\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n      return switchInline(stream, state, inlineNormal);\n    }\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(']:', true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n      // Match URL\n      stream.match(/^[^\\s]+/, true);\n      // Check for link title\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n      }\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n    var mode = {\n      startState: function () {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function (s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function (stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream\n          };\n\n          // Reset state.taskList\n          state.taskList = false;\n\n          // Reset state.trailingSpace\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n          if (!state.localState) {\n            state.f = state.block;\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n        return state.f(stream, state);\n      },\n      innerMode: function (state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function (state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","findModeByName","found","mime","mimes","mode","highlightFormatting","undefined","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","fencedCodeBlockDefaultMode","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","expandedTab","switchInline","stream","state","f","inline","switchBlock","block","lineIsEmpty","line","test","string","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","currListInd","hasExitedList","maxFencedEndInd","returnType","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","replace","regex","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","getLinkHrefInside","linkRE","endChar","returnState","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME"],"sources":["/Users/wangbaiyuan/Documents/Wehelp/Part3/Vcard/client/node_modules/codemirror/mode/markdown/markdown.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.fencedCodeBlockDefaultMode === undefined)\n    modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n      // Reset inline styles which shouldn't propagate across list items\n      state.em = false;\n      state.strong = false;\n      state.code = false;\n      state.strikethrough = false;\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode );\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match('~~', true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(']:', true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}