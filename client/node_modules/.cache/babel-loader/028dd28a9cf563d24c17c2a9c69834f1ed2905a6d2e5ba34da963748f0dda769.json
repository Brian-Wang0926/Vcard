{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function regexpFlags(regexp) {\n    var flags = regexp.flags;\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\") + (regexp.global ? \"g\" : \"\") + (regexp.multiline ? \"m\" : \"\");\n  }\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp),\n      target = current;\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1) target += flags.charAt(i);\n    return current == target ? regexp : new RegExp(regexp.source, target);\n  }\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n  }\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch;\n      var string = doc.getLine(line),\n        match = regexp.exec(string);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n      chunk = 1;\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break;\n        var curLine = doc.getLine(line++);\n        string = string == null ? curLine : string + \"\\n\" + curLine;\n      }\n      chunk = chunk * 2;\n      regexp.lastIndex = start.ch;\n      var match = regexp.exec(string);\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n          inside = match[0].split(\"\\n\");\n        var startLine = start.line + before.length - 1,\n          startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n  function lastMatchIn(string, regexp, endMargin) {\n    var match,\n      from = 0;\n    while (from <= string.length) {\n      regexp.lastIndex = from;\n      var newMatch = regexp.exec(string);\n      if (!newMatch) break;\n      var end = newMatch.index + newMatch[0].length;\n      if (end > string.length - endMargin) break;\n      if (!match || end > match.index + match[0].length) match = newMatch;\n      from = newMatch.index + 1;\n    }\n    return match;\n  }\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line);\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n      chunkSize = 1,\n      endMargin = doc.getLine(start.line).length - start.ch;\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--);\n        string = string == null ? curLine : curLine + \"\\n\" + string;\n      }\n      chunkSize *= 2;\n      var match = lastMatchIn(string, regexp, endMargin);\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n          inside = match[0].split(\"\\n\");\n        var startLine = line + before.length,\n          startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n  var doFold, noFold;\n  if (String.prototype.normalize) {\n    doFold = function (str) {\n      return str.normalize(\"NFD\").toLowerCase();\n    };\n    noFold = function (str) {\n      return str.normalize(\"NFD\");\n    };\n  } else {\n    doFold = function (str) {\n      return str.toLowerCase();\n    };\n    noFold = function (str) {\n      return str;\n    };\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos;\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min;\n      var mid = min + max >> 1;\n      var len = foldFunc(orig.slice(0, mid)).length;\n      if (len == pos) return mid;else if (len > pos) max = mid;else min = mid + 1;\n    }\n  }\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch),\n        string = fold(orig);\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0]);\n        if (found == -1) continue search;\n        var start = adjustPos(orig, string, found, fold) + ch;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n        };\n      } else {\n        var cutFrom = string.length - lines[0].length;\n        if (string.slice(cutFrom) != lines[0]) continue search;\n        for (var i = 1; i < lines.length - 1; i++) if (fold(doc.getLine(line + i)) != lines[i]) continue search;\n        var end = doc.getLine(line + lines.length - 1),\n          endString = fold(end),\n          lastLine = lines[lines.length - 1];\n        if (endString.slice(0, lastLine.length) != lastLine) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n          to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n        };\n      }\n    }\n  }\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line);\n      if (ch > -1) orig = orig.slice(0, ch);\n      var string = fold(orig);\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0]);\n        if (found == -1) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold)),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n        };\n      } else {\n        var lastLine = lines[lines.length - 1];\n        if (string.slice(0, lastLine.length) != lastLine) continue search;\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++) if (fold(doc.getLine(start + i)) != lines[i]) continue search;\n        var top = doc.getLine(line + 1 - lines.length),\n          topString = fold(top);\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search;\n        return {\n          from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n          to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n        };\n      }\n    }\n  }\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false;\n    this.afterEmptyMatch = false;\n    this.doc = doc;\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {\n      from: pos,\n      to: pos\n    };\n    var caseFold;\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold;\n    } else {\n      // Backwards compat for when caseFold was the 4th argument\n      caseFold = options;\n      options = null;\n    }\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false;\n      this.matches = function (reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold);\n      };\n    } else {\n      query = ensureFlags(query, \"gm\");\n      if (!options || options.multiline !== false) this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos);\n      };else this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos);\n      };\n    }\n  }\n  SearchCursor.prototype = {\n    findNext: function () {\n      return this.find(false);\n    },\n    findPrevious: function () {\n      return this.find(true);\n    },\n    find: function (reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch);\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n          return this.atOccurrence = false;\n        }\n      }\n      var result = this.matches(reverse, head);\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n      if (result) {\n        this.pos = result;\n        this.atOccurrence = true;\n        return this.pos.match || true;\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n        this.pos = {\n          from: end,\n          to: end\n        };\n        return this.atOccurrence = false;\n      }\n    },\n    from: function () {\n      if (this.atOccurrence) return this.pos.from;\n    },\n    to: function () {\n      if (this.atOccurrence) return this.pos.to;\n    },\n    replace: function (newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n  CodeMirror.defineExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n  CodeMirror.defineExtension(\"selectMatches\", function (query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({\n        anchor: cur.from(),\n        head: cur.to()\n      });\n    }\n    if (ranges.length) this.setSelections(ranges, 0);\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","Pos","regexpFlags","regexp","flags","ignoreCase","global","multiline","ensureFlags","current","target","i","length","indexOf","charAt","RegExp","source","maybeMultiline","test","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","searchRegexpForwardMultiline","chunk","curLine","before","slice","split","inside","startLine","startCh","lastMatchIn","endMargin","newMatch","end","searchRegexpBackward","first","firstLine","searchRegexpBackwardMultiline","chunkSize","doFold","noFold","String","prototype","normalize","str","toLowerCase","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","searchStringForward","query","caseFold","fold","lines","search","found","cutFrom","endString","searchStringBackward","lastIndexOf","top","topString","SearchCursor","options","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","findNext","find","findPrevious","head","cmpPos","result","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","setSelections"],"sources":["/Users/wangbaiyuan/Documents/Wehelp/Part3/Vcard/client/node_modules/codemirror/addon/search/searchcursor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}