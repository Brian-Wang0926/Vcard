{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n    emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n    unorderedListRE = /[*+-]\\s/;\n  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function (cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(),\n      replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head;\n\n      // If we're not in Markdown mode, fall back to normal newlineAndIndent\n      var eolState = cm.getStateAfter(pos.line);\n      var inner = CodeMirror.innerMode(cm.getMode(), eolState);\n      if (inner.mode.name !== \"markdown\" && inner.mode.helperType !== \"markdown\") {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      } else {\n        eolState = inner.state;\n      }\n      var inList = eolState.list !== false;\n      var inQuote = eolState.quote !== 0;\n      var line = cm.getLine(pos.line),\n        match = listRE.exec(line);\n      var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n      if (!ranges[i].empty() || !inList && !inQuote || !match || cursorBeforeBullet) {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      }\n      if (emptyListRE.test(line)) {\n        var endOfQuote = inQuote && />\\s*$/.test(line);\n        var endOfList = !/>\\s*$/.test(line);\n        if (endOfQuote || endOfList) cm.replaceRange(\"\", {\n          line: pos.line,\n          ch: 0\n        }, {\n          line: pos.line,\n          ch: pos.ch + 1\n        });\n        replacements[i] = \"\\n\";\n      } else {\n        var indent = match[1],\n          after = match[5];\n        var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0);\n        var bullet = numbered ? parseInt(match[3], 10) + 1 + match[4] : match[2].replace(\"x\", \" \");\n        replacements[i] = \"\\n\" + indent + bullet + after;\n        if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n      }\n    }\n    cm.replaceSelections(replacements);\n  };\n\n  // Auto-updating Markdown list numbers when a new item is added to the\n  // middle of a list\n  function incrementRemainingMarkdownListNumbers(cm, pos) {\n    var startLine = pos.line,\n      lookAhead = 0,\n      skipCount = 0;\n    var startItem = listRE.exec(cm.getLine(startLine)),\n      startIndent = startItem[1];\n    do {\n      lookAhead += 1;\n      var nextLineNumber = startLine + lookAhead;\n      var nextLine = cm.getLine(nextLineNumber),\n        nextItem = listRE.exec(nextLine);\n      if (nextItem) {\n        var nextIndent = nextItem[1];\n        var newNumber = parseInt(startItem[3], 10) + lookAhead - skipCount;\n        var nextNumber = parseInt(nextItem[3], 10),\n          itemNumber = nextNumber;\n        if (startIndent === nextIndent && !isNaN(nextNumber)) {\n          if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n          if (newNumber > nextNumber) itemNumber = newNumber + 1;\n          cm.replaceRange(nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]), {\n            line: nextLineNumber,\n            ch: 0\n          }, {\n            line: nextLineNumber,\n            ch: nextLine.length\n          });\n        } else {\n          if (startIndent.length > nextIndent.length) return;\n          // This doesn't run if the next line immediately indents, as it is\n          // not clear of the users intention (new indented item or same level)\n          if (startIndent.length < nextIndent.length && lookAhead === 1) return;\n          skipCount += 1;\n        }\n      }\n    } while (nextItem);\n  }\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","listRE","emptyListRE","unorderedListRE","commands","newlineAndIndentContinueMarkdownList","cm","getOption","Pass","ranges","listSelections","replacements","i","length","pos","head","eolState","getStateAfter","line","inner","innerMode","getMode","mode","name","helperType","execCommand","state","inList","list","inQuote","quote","getLine","match","exec","cursorBeforeBullet","test","slice","ch","empty","endOfQuote","endOfList","replaceRange","indent","after","numbered","indexOf","bullet","parseInt","replace","incrementRemainingMarkdownListNumbers","replaceSelections","startLine","lookAhead","skipCount","startItem","startIndent","nextLineNumber","nextLine","nextItem","nextIndent","newNumber","nextNumber","itemNumber","isNaN"],"sources":["/Users/wangbaiyuan/Documents/Wehelp/Part3/Vcard/client/node_modules/codemirror/addon/edit/continuelist.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n      emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n      unorderedListRE = /[*+-]\\s/;\n\n  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head;\n\n      // If we're not in Markdown mode, fall back to normal newlineAndIndent\n      var eolState = cm.getStateAfter(pos.line);\n      var inner = CodeMirror.innerMode(cm.getMode(), eolState);\n      if (inner.mode.name !== \"markdown\" && inner.mode.helperType !== \"markdown\") {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      } else {\n        eolState = inner.state;\n      }\n\n      var inList = eolState.list !== false;\n      var inQuote = eolState.quote !== 0;\n\n      var line = cm.getLine(pos.line), match = listRE.exec(line);\n      var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n      if (!ranges[i].empty() || (!inList && !inQuote) || !match || cursorBeforeBullet) {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      }\n      if (emptyListRE.test(line)) {\n        var endOfQuote = inQuote && />\\s*$/.test(line)\n        var endOfList = !/>\\s*$/.test(line)\n        if (endOfQuote || endOfList) cm.replaceRange(\"\", {\n          line: pos.line, ch: 0\n        }, {\n          line: pos.line, ch: pos.ch + 1\n        });\n        replacements[i] = \"\\n\";\n      } else {\n        var indent = match[1], after = match[5];\n        var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0);\n        var bullet = numbered ? (parseInt(match[3], 10) + 1) + match[4] : match[2].replace(\"x\", \" \");\n        replacements[i] = \"\\n\" + indent + bullet + after;\n\n        if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n      }\n    }\n\n    cm.replaceSelections(replacements);\n  };\n\n  // Auto-updating Markdown list numbers when a new item is added to the\n  // middle of a list\n  function incrementRemainingMarkdownListNumbers(cm, pos) {\n    var startLine = pos.line, lookAhead = 0, skipCount = 0;\n    var startItem = listRE.exec(cm.getLine(startLine)), startIndent = startItem[1];\n\n    do {\n      lookAhead += 1;\n      var nextLineNumber = startLine + lookAhead;\n      var nextLine = cm.getLine(nextLineNumber), nextItem = listRE.exec(nextLine);\n\n      if (nextItem) {\n        var nextIndent = nextItem[1];\n        var newNumber = (parseInt(startItem[3], 10) + lookAhead - skipCount);\n        var nextNumber = (parseInt(nextItem[3], 10)), itemNumber = nextNumber;\n\n        if (startIndent === nextIndent && !isNaN(nextNumber)) {\n          if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n          if (newNumber > nextNumber) itemNumber = newNumber + 1;\n          cm.replaceRange(\n            nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]),\n          {\n            line: nextLineNumber, ch: 0\n          }, {\n            line: nextLineNumber, ch: nextLine.length\n          });\n        } else {\n          if (startIndent.length > nextIndent.length) return;\n          // This doesn't run if the next line immediately indents, as it is\n          // not clear of the users intention (new indented item or same level)\n          if ((startIndent.length < nextIndent.length) && (lookAhead === 1)) return;\n          skipCount += 1;\n        }\n      }\n    } while (nextItem);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}